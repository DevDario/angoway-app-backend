generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  name               String
  email              String         @unique
  number             String         @unique
  password           String
  disability         String?
  url_foto_de_perfil String?
  role               String         @default("USER")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  feedbacks          Feedback[]
  notifications      Notification[]
}

model Driver {
  id                 Int            @id @default(autoincrement())
  name               String
  email              String         @unique
  phone              String         @unique
  password           String
  licenseNumber      String         @unique
  url_foto_de_perfil String?
  experienceTime     Int
  status             String         @default("AVAILABLE") // AVAILABLE, ON_ROUTE OFFLINE
  currentLatitude    Float?
  currentLongitude   Float?
  lastLogin          DateTime?
  deviceToken        String?
  isVerified         Boolean        @default(false)
  rating             Float          @default(0)
  assignedBus        Bus?           @relation("DriverBus")
  assignedBusNia     String?
  travels            Travel[]
  feedbacks          Feedback[]
  notifications      Notification[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model Bus {
  id          Int        @id @default(autoincrement())
  matricula   String     @unique
  nia         String     @unique
  driverId    Int?       @unique
  routeId     Int
  status      String     @default("IN_TRANSIT")
  capacity    Int
  currentLoad Int
  updatedAt   DateTime   @updatedAt
  driver      Driver?    @relation("DriverBus", fields: [driverId], references: [id])
  route       Route      @relation(fields: [routeId], references: [id])
  travels     Travel[]
  feedbacks   Feedback[]
}

model Travel{
    id        Int        @id @default(autoincrement())
    routeId   Int        
    driverId  Int   
    busId     Int
    profit    Decimal
    route     Route      @relation(fields: [routeId], references: [id])
    driver    Driver     @relation(fields: [driverId], references: [id])
    bus       Bus        @relation(fields: [busId], references: [id])
    createdAt DateTime   @default(now())
}

model Route {
  id          Int             @id @default(autoincrement())
  name        String
  origin      String
  destination String
  status      String          @default("active")
  buses       Bus[]
  stops       Stop[]          @relation("RouteStops")
  schedules   RouteSchedule[] @relation("RouteSchedule")
  travels     Travel[]
}

model RouteSchedule {
  id                       Int      @id @default(autoincrement())
  routeId                  Int
  departureLocation        String
  arrivalLocation          String
  departureTime            DateTime
  arrivalTime              DateTime
  estimatedDurationMinutes Int
  status                   String
  distanceKM               Decimal
  route                    Route    @relation("RouteSchedule", fields: [routeId], references: [id])
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model Stop {
  id      Int    @id @default(autoincrement())
  name    String
  routeId Int
  route   Route  @relation("RouteStops", fields: [routeId], references: [id])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  userId    Int
  busId     Int
  driverId  Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  bus       Bus      @relation(fields: [busId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  driver    Driver   @relation(fields: [driverId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  driverId  Int
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  driver    Driver   @relation(fields: [driverId], references: [id])
}
