generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  name               String
  email              String         @unique
  number             String         @unique
  password           String
  disability         String?
  url_foto_de_perfil String?
  role               String         @default("USER")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  buses              Bus[]
  feedbacks          Feedback[]
  notifications      Notification[]
}

model Driver {
  id                Int    @id @default(autoincrement())
  name              String
  email             String @unique
  phone             String @unique
  password          String
  licenseNumber     String
  urlProfilePicture String
  experienceTime    Int
  assignedBusId     Int?

  status           String    @default("AVAILABLE") // AVAILABLE, ON_ROUTE, OFFLINE
  currentLatitude  Float?
  currentLongitude Float?
  lastLogin        DateTime?
  deviceToken      String?
  isVerified       Boolean   @default(false)
  rating           Float     @default(0)

  feedbacks     Feedback[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Bus       Bus[]
}

model Bus {
  id          Int      @id @default(autoincrement())
  matricula   String   @unique
  nia         String   @unique
  driverId    Int?
  routeId     Int
  status      String   @default("IN_TRANSIT")
  capacity    Int
  currentLoad Int
  location    String
  updatedAt   DateTime @updatedAt

  driver    Driver?    @relation(fields: [driverId], references: [id]) // Agora com Driver
  route     Route      @relation(fields: [routeId], references: [id])
  feedbacks Feedback[]
  User      User?      @relation(fields: [userId], references: [id])
  userId    Int?
}

model Route {
  id            Int    @id @default(autoincrement())
  name          String
  origin        String
  destination   String
  departureTime String
  estimatedTime String
  arrivalTime   String
  status        String @default("active")
  buses         Bus[]
  stops         Stop[] @relation("RouteStops")
}

model Stop {
  id      Int    @id @default(autoincrement())
  name    String
  routeId Int
  route   Route  @relation("RouteStops", fields: [routeId], references: [id])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  userId    Int
  busId     Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  bus       Bus      @relation(fields: [busId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  Driver    Driver?  @relation(fields: [driverId], references: [id])
  driverId  Int?
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  Driver    Driver?  @relation(fields: [driverId], references: [id])
  driverId  Int?
}
